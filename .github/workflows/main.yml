name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  workflow_dispatch:  # Allow manual triggering

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint pytest

      - name: Lint Code
        run: |
          echo "Running pylint..."
          pylint --rcfile=.pylintrc $(git ls-files '*.py') || true

      - name: Run Unit Tests
        run: |
          echo "Running pytest..."
          pytest -v || true

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy Container
        shell: bash
        env:
          AWS_ECR_LOGIN_URI: ${{ secrets.AWS_ECR_LOGIN_URI }}
          ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
          MONGO_DB_URL: ${{ secrets.MONGO_DB_URL }}
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Stop and remove existing container if exists
          docker rm -f netwroksecuritytrial || true

          # Pull latest image
          docker pull ${AWS_ECR_LOGIN_URI}/${ECR_REPOSITORY_NAME}:latest

          # Run new container
          docker run -d \
            --name netwroksecuritytrial \
            --restart always \
            -p 8000:8000 \
            -e "MONGO_DB_URL=${MONGO_DB_URL}" \
            -e "MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}" \
            -e "MLFLOW_TRACKING_USERNAME=${MLFLOW_TRACKING_USERNAME}" \
            -e "MLFLOW_TRACKING_PASSWORD=${MLFLOW_TRACKING_PASSWORD}" \
            -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" \
            -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" \
            -e "AWS_REGION=${AWS_REGION}" \
            ${AWS_ECR_LOGIN_URI}/${ECR_REPOSITORY_NAME}:latest

          # Verify container is running
          docker ps | grep netwroksecuritytrial

          # Clean up old images
          docker system prune -f

  test-application:
    name: Test Application
    needs: continuous-deployment
    runs-on: self-hosted
    steps:
      - name: Wait for application to start
        run: |
          echo "Waiting for application to start..."
          sleep 30  # Increased wait time to ensure application is fully started

      - name: Test application health endpoint
        run: |
          # Try multiple times in case the application is still starting up
          max_attempts=5
          attempt=1
          success=false

          while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
            echo "Attempt $attempt of $max_attempts..."
            response=$(curl -s --connect-timeout 5 http://localhost:8000/health || echo "Connection failed")
            echo "Response: $response"

            if [[ "$response" == *"healthy"* ]]; then
              echo "✅ Application is healthy"
              success=true
              break
            else
              echo "⚠️ Health check not successful yet"
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting 5 seconds before next attempt..."
                sleep 5
              fi
              attempt=$((attempt+1))
            fi
          done

          if [ "$success" = false ]; then
            echo "❌ Application health check failed after $max_attempts attempts"
            echo "Checking container logs:"
            docker logs netwroksecuritytrial
            exit 1
          fi

      - name: Test application root endpoint
        run: |
          # Try multiple times in case the application is still starting up
          max_attempts=5
          attempt=1
          success=false

          while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
            echo "Attempt $attempt of $max_attempts..."
            # Use GET request instead of HEAD
            response=$(curl -s --connect-timeout 5 http://localhost:8000/ || echo "Connection failed")
            echo "Response: $response"

            # Check if the response contains expected content
            if [[ "$response" == *"healthy"* ]] || [[ "$response" == *"Network Security API is running"* ]]; then
              echo "✅ Application root endpoint is working (received valid HTTP response)"
              success=true
              break
            else
              echo "⚠️ Root endpoint check not successful yet"
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting 5 seconds before next attempt..."
                sleep 5
              fi
              attempt=$((attempt+1))
            fi
          done

          if [ "$success" = false ]; then
            echo "❌ Application root endpoint check failed after $max_attempts attempts"
            echo "Checking container logs:"
            docker logs netwroksecuritytrial
            exit 1
          fi